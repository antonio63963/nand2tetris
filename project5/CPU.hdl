// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A register
    Not(in=instruction[15], out=isAinstr);
    Or(a=isAinstr, b=instruction[5], out=aLoad);
    
    Mux16(a=outAlu, b=instruction, sel=isAinstr, out=inAReg);
    ARegister(in=inAReg, load=aLoad, out=outA, out[0..14] = addressM);

    //AM if
    And(a=instruction[15], b=instruction[12], out=selAM);
    Mux16(a=outA, b=inM, sel=selAM, out=outAM);

    //D reg
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outAlu, load=loadD, out=outD);

    ALU(x= outD, y= outAM,         
        zx=instruction[11], // zero the x input?
        nx=instruction[10], // negate the x input?
        zy=instruction[9], // zero the y input?
        ny=instruction[8], // negate the y input?
        f=instruction[7],  // compute (out = x + y) or (out = x & y)?
        no=instruction[6],
        out=outAlu , out=outM, zr= zr, ng=ng );

    //zero result zr
    And(a=instruction[15], b=instruction[1], out=outInstrZr);
    And(a=outInstrZr, b=zr, out=zrOut);

    //ng
    And(a=instruction[15], b=instruction[2], out=isNgInstr);
    And(a=isNgInstr, b=ng, out=ngOut);

    //PC
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    
    And(a=notNg, b=notZr, out=outPos);
    And(a=instruction[15], b=instruction[0], out=outInstNot0);
    And(a=outInstNot0, b=outPos, out=outGt);

    Or(a=ngOut, b=zrOut, out=loadZrng);
    Or(a=loadZrng, b=outGt, out=jump);
    Not(in=jump, out=outInc);

    PC(in=outA, load=jump, reset=reset, inc=outInc, out[0..14]=pc);

    //WRITE M
    And(a=instruction[15], b=instruction[3], out=writeM);
}